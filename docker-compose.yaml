x-common-environment:
  &default-env
  environment:
    - POSTGRES_HOST=postgres
    - POSTGRES_USERNAME=postgres
    - POSTGRES_PASSWORD=postgres
    - POSTGRES_DATABASE=simbir-health
    - POSTGRES_SCHEMA=public
    - JWT_ACCESS_SECRET=qBTmv4oXFFR2GwjexDJ4t6fsIUIUhhXqlktXjXdkcyygs8nPVEwMfo29VDRRepYDVV5IkIxBMzr7OEHXEHd37w
    - JWT_REFRESH_SECRET=c2Rmc2RuZmpzZGZzZGRzZmpoc2RqYmZzZGZzZGZqc2RqYmZic2Rmd3NkZmpzaGRqZmhzZGpoZmpkc2FzZGF1YmVyZXJic25lYnJzZXJlcmU=
    - ACCOUNT_SERVICE_URL=http://account-service:8081/api
    - DOCUMENT_SERVICE_URL=http://document-service:8084
    - HOSPITAL_SERVICE_URL=http://hospital-service:8082/api/Hospitals
    - TIMETABLE_SERVICE_URL=http://timetable-service:8083
    - ELASTICSEARCH_HOST_AND_PORT=elasticsearch:9200
    - DEFAULT_LOCALE=en
    - MIN_OFFSET=0
    - MIN_LIMIT=5
    - MAX_LIMIT=100

services:
  account-service:
    image: account-service:latest
    build: account-service
    restart: "no"
    ports:
      - "8081:8081"
    <<: *default-env
    depends_on:
      postgres:
        condition: service_healthy
  document-service:
    image: document-service:latest
    build: document-service
    restart: "on-failure:10"
    ports:
      - "8084:8084"
    <<: *default-env
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
  hospital-service:
    image: hospital-service:latest
    build: hospital-service
    restart: "no"
    ports:
      - "8082:8082"
    <<: *default-env
    depends_on:
      postgres:
        condition: service_healthy
  timetable-service:
    image: timetable-service:latest
    build: timetable-service
    restart: "no"
    ports:
      - "8083:8083"
    <<: *default-env
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:17.0
    restart: "no"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql-scripts/:/docker-entrypoint-initdb.d/
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: simbir-health
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
  elasticsearch:
    image: elasticsearch:8.15.3
    restart: "no"
    ports:
      - "9200:9200"
    environment:
      xpack.security.enabled: "false"
      bootstrap.memory_lock: "true"
      discovery.type: "single-node"
    healthcheck:
      test: curl -u --fail -s http://localhost:9200 || exit 1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    ulimits:
      memlock:
        soft: -1
        hard: -1
  kibana:
    image: kibana:8.15.3
    restart: "no"
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    depends_on:
      elasticsearch:
        condition: service_healthy
  kafka:
    image: confluentinc/cp-kafka:7.7.1
    restart: "no"
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NODE_ID: 1
      CLUSTER_ID: TMT6vlBkRpiFdCYWOk5_1g
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:9093
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5
    labels:
      amplicode.image: confluent/kafka
  kafkaui:
    image: provectuslabs/kafka-ui:v0.7.2
    restart: "no"
    ports:
      - "8989:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: TMT6vlBkRpiFdCYWOk5_1g
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit -1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5
  mongo:
    image: mongo:8.0.3
    restart: "no"
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongodb_secret
      MONGO_INITDB_DATABASE: mydb
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
  redis:
    image: redis:7.4.1
    restart: "no"
    ports:
      - "6379:6379"
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
  keycloak:
    image: quay.io/keycloak/keycloak:26.0.6
    restart: "no"
    command:
      - "start-dev"
    ports:
      - "9080:9080"
    environment:
      KC_HTTP_PORT: 9080
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: dev-mem
      KC_HEALTH_ENABLED: "true"
    healthcheck:
      test:
        [ "CMD-SHELL", "{ exec 3<>/dev/tcp/localhost/9080 && echo -e \"GET /health/ready HTTP/1.1\nhost: localhost:9080\n\" >&3 && timeout --preserve-status 1 cat <&3 | grep -m 1 -q 'status.*UP'; }" ]
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5
  prometheus:
    image: prom/prometheus:v3.0.0
    restart: "no"
    command:
      - "--web.enable-lifecycle"
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
  grafana:
    image: grafana/grafana:11.3.1
    restart: "no"
    ports:
      - "3000:3000"
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
    healthcheck:
      test: curl --fail -s http://localhost:3000/api/health || exit 1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4:8.13.0
    restart: "no"
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:80/misc/ping || exit -1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
volumes:
  postgres_data:
  kafka_data:
  mongo_data:
  pgadmin_data: